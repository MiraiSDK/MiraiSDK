#!/bin/sh

pushd `pwd`/`dirname $0`
SCRIPT_ROOT=`pwd`
popd

export MIRAI_ROOT_PATH="$SCRIPT_ROOT"
export MIRAI_PROJECTS_PATH="$MIRAI_ROOT_PATH/Projects"
export MIRAI_PRODUCTS_ANDROID_PATH="$MIRAI_ROOT_PATH/Products/android"

if [ "$ANDROID_NDK_PATH" == "" ]; then
export ANDROID_NDK_PATH="$MIRAI_PRODUCTS_ANDROID_PATH/android-ndk-r9b" # if you already has NDK, change this to you NDK path
fi
if [ "$ANDROID_JDK_PATH" == "" ]; then
export ANDROID_JDK_PATH="$MIRAI_PRODUCTS_ANDROID_PATH/adt-bundle-mac-x86_64-20131030/sdk" # if you already has JDK, change this to you JDK path
fi

export STANDALONE_TOOLCHAIN_PATH="$MIRAI_PRODUCTS_ANDROID_PATH/android-toolchain-arm"
export GNUSTEP_MAKE_CONFIG_PATH="$MIRAI_PROJECTS_PATH/dependencies/config"
export SYSROOTFLAGS_ARM="--sysroot $STANDALONE_TOOLCHAIN_PATH/sysroot"

export CLANG_ARM=$STANDALONE_TOOLCHAIN_PATH/bin/arm-linux-androideabi-clang
export CLANGPP_ARM=$STANDALONE_TOOLCHAIN_PATH/bin/arm-linux-androideabi-clang++

export GCC_ARM=$STANDALONE_TOOLCHAIN_PATH/bin/arm-linux-androideabi-gcc
export LD_ARM=$STANDALONE_TOOLCHAIN_PATH/bin/arm-linux-androideabi-ld

export GXX_ARM=$STANDALONE_TOOLCHAIN_PATH/bin/arm-linux-androideabi-g++

export AR_ARM=$STANDALONE_TOOLCHAIN_PATH/bin/arm-linux-androideabi-ar
export RANLIB_ARM=$STANDALONE_TOOLCHAIN_PATH/bin/arm-linux-androideabi-ranlib
export OBJDUMP_ARM=$STANDALONE_TOOLCHAIN_PATH/bin/arm-linux-androideabi-objdump

checkError()
{
    if [ "${1}" -ne "0" ]; then
        echo "*** Error: ${2}"
        exit ${1}
    fi
}

buildObjc2()
{
	pushd $MIRAI_PROJECTS_PATH/runtime/objc
	echo "Build objc2"
	./buildObjC2
	checkError $? "Make objc2 failed"
	popd

}

buildGNUstepMake()
{
    echo "Build GNUstep Makefiles"
	pushd $MIRAI_PROJECTS_PATH/dependencies

    if [ ! -f gnustep-make-2.6.2.tar.gz ]; then
		echo "Downloadng gnustep-make-2.6.2..."
        curl ftp://ftp.gnustep.org/pub/gnustep/core/gnustep-make-2.6.2.tar.gz > gnustep-make-2.6.2.tar.gz
    fi
    tar -xzf gnustep-make-2.6.2.tar.gz

    cp $GNUSTEP_MAKE_CONFIG_PATH/config.sub gnustep-make-2.6.2
    cp $GNUSTEP_MAKE_CONFIG_PATH/config.guess gnustep-make-2.6.2

    pushd gnustep-make-2.6.2

    patch -p1 -i ../gsmake_target.patch

    CC="$CLANG_ARM" CXX="$CLANGPP_ARM" CPPFLAGS="$SYSROOTFLAGS_ARM" CFLAGS="$SYSROOTFLAGS_ARM" AR="$AR_ARM" ./configure --prefix=$STANDALONE_TOOLCHAIN_PATH/sysroot/usr --host="arm-linux-androideabi"
    checkError $? "configure gnustep-make failed"

    make install
    checkError $? "Make install gnutsep-make failed"

	popd
	popd
}

prepareConfig()
{
	pushd $MIRAI_PROJECTS_PATH/dependencies

	if [ ! -d config ]; then
		echo "Downloadng gnustep's config..."
	    git clone http://git.savannah.gnu.org/r/config.git/ config
	fi
	popd
}

#1. get Android NDK

if [ ! -d $ANDROID_NDK_PATH ]; then
	pushd $MIRAI_PRODUCTS_ANDROID_PATH
	
	echo "Missing Android NDK, will download it, if you already has NDK, please set it to environment: ANDROID_NDK_PATH"
	
	if [ ! -f android-ndk-r9b-darwin-x86_64.tar.bz2 ]; then
		echo "Downloadng Android NDK..."
		curl http://dl.google.com/android/ndk/android-ndk-r9b-darwin-x86_64.tar.bz2 -o android-ndk-r9b-darwin-x86_64.tar.bz2
	fi
	
	tar -xvyf android-ndk-r9b-darwin-x86_64.tar.bz2
	
	if [ -d $ANDROID_NDK_PATH ]; then
		rm android-ndk-r9b-darwin-x86_64.tar.bz2
	fi
	popd
fi

#get Android SDK
if [ ! -d $ANDROID_JDK_PATH ]; then
	pushd $MIRAI_PRODUCTS_ANDROID_PATH
	
	echo "Missing Android SDK, will download it, if you already has Android SDK, please set it to environment: ANDROID_JDK_PATH"
	if [ -f adt-bundle-mac-x86_64-20131030.zip ]; then
		echo "Downloadng Android SDK adt-bundle-mac-x86_64-20131030.zip..."
		curl http://dl.google.com/android/adt/adt-bundle-mac-x86_64-20131030.zip -o adt-bundle-mac-x86_64-20131030.zip
	fi
	
	tar -vxzf adt-bundle-mac-x86_64-20131030.zip android-jdk
	if [ -d $ANDROID_JDK_PATH ]; then
		rm android-ndk-r9b-darwin-x86_64.tar.bz2
	else
		echo "Missing Android SDK folder, take a look what's extracted folder name"
		exit 1;
	fi
	
	popd
fi

#2. make standalone toolchain path
if [ ! -d $STANDALONE_TOOLCHAIN_PATH ]; then
    $ANDROID_NDK_PATH/build/tools/make-standalone-toolchain.sh --platform="android-14" --install-dir=$STANDALONE_TOOLCHAIN_PATH --arch=arm --llvm-version=3.3
	
	cp $ANDROID_NDK_PATH/sources/cxx-stl/gnu-libstdc++/4.8/libs/armeabi/libgnustl_shared.so $$STANDALONE_TOOLCHAIN_PATH/sysroot/usr/lib/
	cp $ANDROID_NDK_PATH/toolchains/arm-linux-androideabi-4.8/prebuilt/darwin-x86_64/lib/gcc/arm-linux-androideabi/4.8/libgcc.a $STANDALONE_TOOLCHAIN_PATH/sysroot/usr/lib/
	
	pushd $STANDALONE_TOOLCHAIN_PATH/sysroot/usr/lib
	# link libcxxrt.so
	ln -s libgnustl_shared.so libcxxrt.so
	popd
	
	pushd $MIRAI_PRODUCTS_ANDROID_PATH/toolchainPatchs
	./patchToolchainLd
	popd
fi

export PATH=$PATH:$STANDALONE_TOOLCHAIN_PATH/bin # Add Android toolchain to PATH for scripting

#3. prepare config
prepareConfig

#4. build gnustep-make
if [ ! -f $STANDALONE_TOOLCHAIN_PATH/sysroot/usr/share/GNUstep/Makefiles/GNUstep.sh ]; then
    buildGNUstepMake
fi

#5. build runtime
pushd $MIRAI_PROJECTS_PATH/runtime
./buildRuntime
checkError $? "Make install runtime failed"

popd

. $STANDALONE_TOOLCHAIN_PATH/sysroot/usr/share/GNUstep/Makefiles/GNUstep.sh

# iccu
if [ ! -f $STANDALONE_TOOLCHAIN_PATH/sysroot/usr/lib/libicui18n.a ]; then
	pushd $MIRAI_PROJECTS_PATH/CoreFoundation/icu
	./build_icu.sh
	checkError $? "Make install icu failed"
	popd
fi

#6. gnustep-base
if [ ! -f $STANDALONE_TOOLCHAIN_PATH/sysroot/usr/lib/libgnustep-base.so ]; then
	pushd $MIRAI_PROJECTS_PATH/Foundation
	./buildgnustep-base.sh
	checkError $? "build gnustep-base failed"
	popd
fi

# dependencies
pushd $MIRAI_PROJECTS_PATH/dependencies
./build.sh
popd


#. gnustep-corebase (Core Foundation)
if [ ! -f $STANDALONE_TOOLCHAIN_PATH/sysroot/usr/lib/libgnustep-corebase.a ]; then
	pushd $MIRAI_PROJECTS_PATH/CoreFoundation
	./buildCorebase.sh
	popd
fi

# cairo
if [ ! -f $STANDALONE_TOOLCHAIN_PATH/sysroot/usr/lib/libcairo.a ]; then
	pushd $MIRAI_PROJECTS_PATH/cairo
	./buildCairo.sh
	checkError $? "build cairo failed"
	popd
fi

# opal (Core Graphics)
if [ ! -f $STANDALONE_TOOLCHAIN_PATH/sysroot/usr/lib/libopal.so ]; then
	echo "build CoreGraphics..."
	pushd $MIRAI_PROJECTS_PATH/CoreGraphics
	./buildOpal.sh
	checkError $? "build CoreGraphics failed"
	
	popd
fi

pushd $STANDALONE_TOOLCHAIN_PATH/sysroot
	mkdir -p System/Library/Frameworks
	pushd System/Library/Frameworks

		mkdir CoreFoundation.framework Foundation.framework UIKit.framework CoreGraphics.framework GNUstepBase.framework CoreText.framework QuartzCore.framework

		pushd CoreFoundation.framework
		ln -sf ../../../../usr/include/CoreFoundation Headers
		popd

		pushd Foundation.framework  
		ln -sf ../../../../usr/include/Foundation Headers
		popd

		pushd  CoreGraphics.framework
		ln -sf ../../../../usr/include/CoreGraphics Headers
		popd

		pushd  CoreText.framework
		ln -sf ../../../../usr/include/CoreText Headers
		popd

		pushd  QuartzCore.framework
		ln -sf ../../../../usr/include/QuartzCore Headers
		popd
	popd
popd

pushd $STANDALONE_TOOLCHAIN_PATH/sysroot/usr/include
ln -sf $STANDALONE_TOOLCHAIN_PATH/sysroot/System/Library/Frameworks/UIKit.framework/Headers UIKit
ln -sf $MIRAI_PRODUCTS_ANDROID_PATH/SDKHeaders/Availability.h
popd
pushd $STANDALONE_TOOLCHAIN_PATH/sysroot/usr/lib
ln -sf $STANDALONE_TOOLCHAIN_PATH/sysroot/System/Library/Frameworks/UIKit.framework/Versions/A/UIKit libUIKit.so
popd

# link Xcode
pushd $MIRAI_PRODUCTS_ANDROID_PATH
./install
popd